import random

class Hangman:
    def __init__(self, word_list_file):
        self.words = self.load_words(word_list_file)
        self.reset_game()

    def load_words(self, file_name):
        try:
            with open(file_name) as f:
                return f.read().splitlines()
        except FileNotFoundError:
            print("Le fichier des mots est introuvable.")
            return []

    def reset_game(self):
        self.word = random.choice(self.words)
        self.display = ['_'] * len(self.word)
        self.attempts = 10
        self.guessed_letters = []

    def display_game(self):
        print(' '.join(self.display))
        print('Attempts left:', self.attempts)
        print('Guessed letters:', ' '.join(self.guessed_letters))

    def replace_letter(self, letter):
        for i in range(len(self.word)):
            if self.word[i] == letter:
                self.display[i] = letter

    def check_win(self):
        if '_' not in self.display:
            print('Congratulations, you won 🏆')
            return True
        return False

    def check_loss(self):
        if self.attempts == 0:
            print('Sorry, you lost 💀 The word was', self.word)
            return True
        return False

    def handle_guess(self, guess):
        if guess in self.guessed_letters:
            print('You already guessed that letter.')
        elif guess in self.word:
            print('Correct!')
            self.guessed_letters.append(guess)
        else:
            print('Incorrect.')
            self.attempts -= 1
            self.guessed_letters.append(guess)

    def draw_hangman(self):
        hangman_states = {
            9: ['  _______\n |', ' |', ' |'],
            8: ['  _______\n |', ' |', ' |'],
            7: ['  _______\n |       |', ' |', ' |'],
            6: ['  _______\n |       |', ' |       🙁', ' |'],
            5: ['  _______\n |       |', ' |       ☹️', ' |       |'],
            4: ['  _______\n |       |', ' |       😩', ' |      /|'],
            3: ['  _______\n |       |', ' |       😓', ' |      /|\\'],
            2: ['  _______\n |       |', ' |       😖', ' |      /|\\', ' |      /'],
            1: ['  _______\n |       |', ' |       😰', ' |      /|\\', ' |      / \\'],
            0: ['  _______\n |       |', ' |      💀', ' |      /|\\', ' |      / \\']
        }
        for line in hangman_states.get(self.attempts, ['' for _ in range(4)]):
            print(line)

    def play_game(self):
        while True:
            self.display_game()
            guess = input('Guess a letter: ').lower()
            if len(guess) != 1 or not guess.isalpha():
                print("Invalid input. Please enter a single letter.")
                continue
            self.handle_guess(guess)
            self.replace_letter(guess)
            if self.check_win():
                break
            self.draw_hangman()
            if self.check_loss():
                break

    def ask_to_play_again(self):
        while True:
            replay = input("Do you want to play again? (yes/no): ").strip().lower()
            if replay == 'yes':
                self.reset_game()
                self.play_game()
            elif replay == 'no':
                print("Thank you for playing!")
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

if __name__ == "__main__":
    game = Hangman('words.txt')
    game.play_game()
    game.ask_to_play_again()
